[
  {
    "id": "955b5bfd6ec5b9a5",
    "type": "tab",
    "label": "Machine Monitoring",
    "disabled": false,
    "info": "PLC Machine Monitoring Flow - Improved Version",
    "env": []
  },
  {
    "id": "aed5656467933d87",
    "type": "inject",
    "z": "955b5bfd6ec5b9a5",
    "name": "Poll Every Second",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": "0.5",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 140,
    "wires": [["86bd4b3d1a561cc7"]]
  },
  {
    "id": "86bd4b3d1a561cc7",
    "type": "function",
    "z": "955b5bfd6ec5b9a5",
    "name": "Generate PLC Requests",
    "func": "// Define the machines to poll\nconst machines = [\n    { code: \"52032\", ip: \"10.42.46.49\" },\n    { code: \"52034\", ip: \"10.42.46.52\" },\n    { code: \"52049\", ip: \"10.42.46.55\" },\n    { code: \"52066\", ip: \"10.42.46.62\" }\n];\n\n// Create messages for each machine\nlet msgs = [];\nfor (let machine of machines) {\n    msgs.push({\n        topic: machine.code,\n        payload: {\n            unitid: 1,\n            fc: 3,           // Function code for reading holding registers\n            address: 45,     // Starting address\n            quantity: 3      // Number of registers to read\n        },\n        ip: machine.ip,\n        machineName: \"SC \" + machine.code\n    });\n}\n\nreturn [msgs];",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 375,
    "y": 140,
    "wires": [["b9a9dd3ed98354b6"]]
  },
  {
    "id": "b9a9dd3ed98354b6",
    "type": "split",
    "z": "955b5bfd6ec5b9a5",
    "name": "Split requests",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "property": "payload",
    "x": 580,
    "y": 140,
    "wires": [["fadf793d2425aced"]]
  },
  {
    "id": "fadf793d2425aced",
    "type": "modbus-flex-getter",
    "z": "955b5bfd6ec5b9a5",
    "name": "Read PLC Data",
    "showStatusActivities": true,
    "showErrors": true,
    "showWarnings": true,
    "logIOActivities": false,
    "server": "7ec9a1403fb6beea",
    "useIOFile": false,
    "ioFile": "",
    "useIOForPayload": false,
    "emptyMsgOnFail": false,
    "keepMsgProperties": true,
    "delayOnStart": false,
    "startDelayTime": "",
    "x": 755,
    "y": 140,
    "wires": [["643244c3c459fa55"], ["b2ae4974e7319a89"]]
  },
  {
    "id": "643244c3c459fa55",
    "type": "function",
    "z": "955b5bfd6ec5b9a5",
    "name": "Process Machine Data",
    "func": "// Get machine code from topic\nconst machineCode = msg.topic;\nconst status = msg.payload[0];\nconst counter = msg.payload[2];\n\n// Operation name mapping\nconst operationNames = {\n    0: 'MACHINE OFF',\n    1: 'TROUBLE MACHINE',\n    2: 'CHOKOTEI',\n    3: 'DANDORI',\n    4: 'STOP PLANNING',\n    5: 'TOOL CHANGES',\n    7: 'WAITING MATERIAL',\n    8: 'CONTROL LOSS TIME',\n    9: 'UNKNOWN LOSS TIME',\n    10: 'NORMAL OPERATION',\n    11: 'TENKEN',\n    13: 'TENKEN',\n    14: 'NOT CONNECTED',\n    21: 'JAM ISTIRAHAT',\n    22: 'RENCANA PERBAIKAN',\n    23: 'TRIAL',\n    24: 'PLAN PROSES SELESAI',\n    25: '5S',\n    26: 'MEETING PAGI/SORE',\n    27: 'TENKEN',\n    28: 'PEMANASAN',\n    29: 'CEK QC',\n    30: 'INPUT DATA',\n    31: 'BUANG KIRIKO',\n    32: 'MENUNGGU INTRUKSI ATASAN',\n    33: 'REPAIR',\n    34: 'KAIZEN',\n    35: 'GANTI TOISHI',\n    36: 'GANTI DRESSER',\n    37: '1 TOOTH',\n    38: 'CHECK HAGATA',\n    39: 'DRESSING PROFILE',\n    40: 'DRESS-2',\n    41: 'ANTRI JOB'\n};\n\n// Get operation name from status code\nconst operationName = operationNames[status] || 'UNKNOWN';\n\n// Compare with last data to check if update is needed\nconst cacheKey = 'StatusCounter_' + machineCode;\nconst lastData = flow.get(cacheKey) || null;\n\n// Update only if data has changed\nif (!lastData || lastData.status !== status || lastData.counter !== counter) {\n    // Store current data in flow context\n    flow.set(cacheKey, {\n        status: status,\n        counter: counter\n    });\n    \n    // Format database message\n    msg.topic = \"INSERT\";\n    msg.payload = {\n        MachineCode: machineCode,\n        MachineName: \"SC \" + machineCode,\n        OPERATION_NAME: operationName,\n        MACHINE_STATUS: status,\n        MACHINE_COUNTER: counter,\n        SEND_PLC: 1,\n        CreatedAt: new Date().toISOString()\n    };\n    \n    return msg;\n}\n\n// No change, don't forward message\nreturn null;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 950,
    "y": 118.5,
    "wires": [["3b624373f9f25308"]]
  },
  {
    "id": "3b624373f9f25308",
    "type": "MSSQL",
    "z": "955b5bfd6ec5b9a5",
    "mssqlCN": "c8ee43fc3d69794f",
    "name": "Insert to MACHINE_LOG",
    "query": "INSERT INTO [MACHINE_LOG].[dbo].[Machine_{{payload.MachineCode}}]\n    ([MachineCode]\n    ,[MachineName]\n    ,[OPERATION_NAME]\n    ,[MACHINE_STATUS]\n    ,[MACHINE_COUNTER]\n    ,[SEND_PLC]\n    ,[CreatedAt])\nVALUES\n    (@MachineCode\n    ,@MachineName\n    ,@OPERATION_NAME\n    ,@MACHINE_STATUS\n    ,@MACHINE_COUNTER\n    ,@SEND_PLC\n    ,@CreatedAt)",
    "outField": "payload",
    "x": 1175,
    "y": 118.5,
    "wires": [[]]
  },
  {
    "id": "b2ae4974e7319a89",
    "type": "debug",
    "z": "955b5bfd6ec5b9a5",
    "name": "PLC Error",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "error",
    "statusType": "auto",
    "x": 1370.5,
    "y": 161.5,
    "wires": []
  },
  {
    "id": "a23d95323b29e7c2",
    "type": "status",
    "z": "955b5bfd6ec5b9a5",
    "name": "DB Success",
    "scope": null,
    "x": 1370.5,
    "y": 118.5,
    "wires": [[]]
  },
  {
    "id": "7ec9a1403fb6beea",
    "type": "modbus-client",
    "name": "SC 52032",
    "clienttype": "tcp",
    "bufferCommands": true,
    "stateLogEnabled": false,
    "queueLogEnabled": false,
    "failureLogEnabled": true,
    "tcpHost": "10.42.46.49",
    "tcpPort": "502",
    "tcpType": "DEFAULT",
    "serialPort": "/dev/ttyUSB",
    "serialType": "RTU-BUFFERD",
    "serialBaudrate": "9600",
    "serialDatabits": "8",
    "serialStopbits": "1",
    "serialParity": "none",
    "serialConnectionDelay": "100",
    "serialAsciiResponseStartDelimiter": "0x3A",
    "unit_id": 1,
    "commandDelay": 1,
    "clientTimeout": 1000,
    "reconnectOnTimeout": true,
    "reconnectTimeout": 2000,
    "parallelUnitIdsAllowed": true,
    "showErrors": false,
    "showWarnings": true,
    "showLogs": true
  },
  {
    "id": "c8ee43fc3d69794f",
    "type": "MSSQL-CN",
    "name": "MACHINE_LOG",
    "server": "10.41.51.2 ",
    "encyption": false,
    "database": "MACHINE_LOG"
  }
]
